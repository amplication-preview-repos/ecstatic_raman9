/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CommandQueue as PrismaCommandQueue,
  User as PrismaUser,
  Game as PrismaGame,
} from "@prisma/client";

export class CommandQueueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommandQueueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commandQueue.count(args);
  }

  async commandQueues(
    args: Prisma.CommandQueueFindManyArgs
  ): Promise<PrismaCommandQueue[]> {
    return this.prisma.commandQueue.findMany(args);
  }
  async commandQueue(
    args: Prisma.CommandQueueFindUniqueArgs
  ): Promise<PrismaCommandQueue | null> {
    return this.prisma.commandQueue.findUnique(args);
  }
  async createCommandQueue(
    args: Prisma.CommandQueueCreateArgs
  ): Promise<PrismaCommandQueue> {
    return this.prisma.commandQueue.create(args);
  }
  async updateCommandQueue(
    args: Prisma.CommandQueueUpdateArgs
  ): Promise<PrismaCommandQueue> {
    return this.prisma.commandQueue.update(args);
  }
  async deleteCommandQueue(
    args: Prisma.CommandQueueDeleteArgs
  ): Promise<PrismaCommandQueue> {
    return this.prisma.commandQueue.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.commandQueue
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getGame(parentId: string): Promise<PrismaGame | null> {
    return this.prisma.commandQueue
      .findUnique({
        where: { id: parentId },
      })
      .game();
  }
}
