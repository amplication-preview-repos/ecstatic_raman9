/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommandQueueService } from "../commandQueue.service";
import { CommandQueueCreateInput } from "./CommandQueueCreateInput";
import { CommandQueue } from "./CommandQueue";
import { CommandQueueFindManyArgs } from "./CommandQueueFindManyArgs";
import { CommandQueueWhereUniqueInput } from "./CommandQueueWhereUniqueInput";
import { CommandQueueUpdateInput } from "./CommandQueueUpdateInput";

export class CommandQueueControllerBase {
  constructor(protected readonly service: CommandQueueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommandQueue })
  async createCommandQueue(
    @common.Body() data: CommandQueueCreateInput
  ): Promise<CommandQueue> {
    return await this.service.createCommandQueue({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        game: data.game
          ? {
              connect: data.game,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        command: true,
        executedAt: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },

        game: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommandQueue] })
  @ApiNestedQuery(CommandQueueFindManyArgs)
  async commandQueues(@common.Req() request: Request): Promise<CommandQueue[]> {
    const args = plainToClass(CommandQueueFindManyArgs, request.query);
    return this.service.commandQueues({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        command: true,
        executedAt: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },

        game: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommandQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commandQueue(
    @common.Param() params: CommandQueueWhereUniqueInput
  ): Promise<CommandQueue | null> {
    const result = await this.service.commandQueue({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        command: true,
        executedAt: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },

        game: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommandQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommandQueue(
    @common.Param() params: CommandQueueWhereUniqueInput,
    @common.Body() data: CommandQueueUpdateInput
  ): Promise<CommandQueue | null> {
    try {
      return await this.service.updateCommandQueue({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          game: data.game
            ? {
                connect: data.game,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          command: true,
          executedAt: true,
          status: true,

          user: {
            select: {
              id: true,
            },
          },

          game: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommandQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommandQueue(
    @common.Param() params: CommandQueueWhereUniqueInput
  ): Promise<CommandQueue | null> {
    try {
      return await this.service.deleteCommandQueue({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          command: true,
          executedAt: true,
          status: true,

          user: {
            select: {
              id: true,
            },
          },

          game: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
